Definition id {X} (a : X) : X := a.

Definition compose {A B C}
  (f : B -> C) (g : A -> B) (x : A) : C := f (g x).

Notation "f ∘ g" := (compose f g) (at level 60, right associativity).

Class Functor (F : Type -> Type) := {
  fmap : forall {X Y}, (X -> Y) -> F X -> F Y;
  functor_law_1 : forall {X} (x : F X), fmap (@id X) x = @id (F X) x;
  functor_law_2 : forall {X Y Z} (x : F X) (f : Y -> Z) (g : X -> Y),
    (fmap f ∘ fmap g) x = fmap (f ∘ g) x
}.

Global Instance List_Functor : Functor list := {
  fmap := @map
}.
Proof.
  (* functor_law_1 *)
  intros. induction x as [| x'].
  Case "x = nil". reflexivity.
  Case "x = cons". simpl. rewrite IHx. reflexivity.

  (* functor_law_2 *)
  intros. induction x as [| x'].
  Case "x = nil". reflexivity.
  Case "x = cons".
    unfold compose. unfold compose in IHx.
    simpl. rewrite IHx. reflexivity.  Qed.

Inductive Yoneda (F : Type -> Type) X : Type :=
  | Embed : forall {Y}, (F Y) -> (Y -> X) -> Yoneda F X.

Definition lift_yoneda (F : Type -> Type) X (a : F X)
  : Yoneda F X := Embed F X a id.

Definition lower_yoneda (F : Type -> Type) (f_dict : Functor F)
  X (a : Yoneda F X) : F X :=
  match a with
    | Embed F x f => fmap f x
  end.

Theorem eq_remove_Embed : forall (F : Type -> Type) X Y (f : Y -> X) (n m : F Y),
    n = m -> Embed F X n f = Embed F X m f.
Proof.
  intros. inversion H. reflexivity.  Qed.

Class Isomorphic X Y := {
  to   : X -> Y;
  from : Y -> X;

  iso_to    : forall (x : X), from (to x) = x;
  iso_from  : forall (y : Y), to (from y) = y
}.

Notation "X ≅ Y" := (Isomorphic X Y) (at level 50) : type_scope.

Global Instance Yoneda_Lemma (F : Type -> Type) (f_dict : Functor F) X
  : F X ≅ Yoneda F X := {
  to   := lift_yoneda F X;
  from := lower_yoneda F f_dict X
}.
Proof.
  intros. compute. apply functor_law_1.

  intros. unfold lift_yoneda. unfold lower_yoneda. destruct y.
    admit.  Qed.