    (let ((conv-chars '(("[ (]\\(->\\)[) ]" . ?→)
                        ("[ (]\\(/=\\)[) ]" . ?≠)
                        ("[ (]\\(<=\\)[) ]" . ?≤)
                        ("[ (]\\(>=\\)[) ]" . ?≥)
                        ("[ (]\\(\\.\\)[) ]" . ?∘)
                        ("[ (]\\(&&\\)[) ]" . ?∧)
                        ("[ (]\\(||\\)[) ]" . ?∨)
                        ("[ (]\\(\\\\\\)[(_a-z]" . ?λ)
                        (" \\(<-\\) " . ?←)
                        (" \\(-<\\) " . ?⤙)
                        (" \\(=>\\) " . ?⇒)
                        ("[ (]\\(<<<\\)[ )]" . ?⋘)
                        ("[ (]\\(>>>\\)[ )]" . ?⋙)
                        (" \\(::\\) " . ?∷)
                        ("\\(`elem`\\)" . ?∈)
                        ("\\<\\(forall\\)\\> " . ?∀))))
      (font-lock-add-keywords
       'haskell-mode
       (append (mapcar (lambda (chars)
                         `(,(car chars)
                           (0 (ignore
                               (compose-region (match-beginning 1)
                                               (match-end 1) ,(cdr chars))))))
                       conv-chars)
               '(("(\\|)" . 'esk-paren-face)))))