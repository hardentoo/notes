(defunc validHeapObjectp (addr MddContext)
  :input-contract (and (natp addr) (MddContext-typep MddContext))
  :output-contract (booleanp (validHeapObjectp addr MddContext))
  (let ((obj (getFromHeap addr MddContext)))
    (or (not obj)
        (Hotel_CardKeyp obj)
        (Hotel_CardKeyEncoderp obj)
        (Hotel_CheckInp obj)
        (Hotel_CheckOutp obj)
        (Hotel_Hotelp obj)
        (Hotel_KeyCodeGeneratorp obj)
        (Hotel_Lockp obj)
        (Hotel_Occupantp obj)
        (Hotel_PaymentSystemp obj)
        (Hotel_Personp obj)
        (Hotel_Roomp obj)
        (Hotel_Signp obj))))

(defun-sk hasValidHeap (MddContext)
  (forall (addr)
          (and (natp addr)
               (validHeapObjectp addr MddContext))))

(defthm validHeapp
  (implies (and (MddContext-typep MddContext)
                (hasValidHeap MddContext))
           (validHeapObjectp addr MddContext)))
