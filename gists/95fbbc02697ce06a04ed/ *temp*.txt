(defun alist-cars (xs)
  (cond ((atom xs) nil)
        ((consp (car xs))
         (cons (caar xs) (alist-cars (cdr xs))))
        (t (alist-cars (cdr xs)))))

(defthm perm-alist-cars-how-many
  (implies (perm xs ys)
           (equal (how-many e (alist-cars xs))
                  (how-many e (alist-cars ys))))
  :hints (("Goal" :in-theory (enable perm))))

(defthm how-many-alist-cars-lt
  (implies (consp e)
           (<= (how-many e x)
               (how-many (car e) (alist-cars x)))))

(defcong perm perm (alist-cars x) 1)
