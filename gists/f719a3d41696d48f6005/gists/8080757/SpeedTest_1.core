[1 of 1] Compiling SpeedTest        ( SpeedTest.hs, SpeedTest.o )

==================== Tidy Core ====================
Result size = 174

a_r1ND
  :: IO ()
     -> State# RealWorld
     -> (# State# RealWorld,
           FunPtr (IO ()) #)

a_r1ND =
  \ (ds_dEw :: IO ())
    (eta_B1 :: State# RealWorld) ->
    case makeStablePtr# @ (IO ()) ds_dEw eta_B1
    of _ { (# s'_dGx, sp_dGy #) ->
    case {__pkg_ccall createAdjustor Int#
                            -> StablePtr# (IO ())
                            -> Addr#
                            -> Addr#
                            -> State# RealWorld
                            -> (# State# RealWorld, Addr# #)}_dES
           1 sp_dGy (__label "SpeedTest_dEv" (function)) "" s'_dGx
    of _ { (# ds1_dEQ, ds2_dEP #) ->
    (# ds1_dEQ, FunPtr @ (IO ()) ds2_dEP #)
    }
    }

SpeedTest.mk'speed_test_cb [InlPrag=[NEVER]]
  :: IO () -> IO SpeedTest.C'speed_test_cb

SpeedTest.mk'speed_test_cb =
  a_r1ND
  `cast` (<IO ()>
          -> Sym (NTCo:IO <FunPtr (IO ())>)
          :: (IO ()
              -> State# RealWorld
              -> (# State# RealWorld,
                    FunPtr (IO ()) #))
               ~#
             (IO ()
              -> IO (FunPtr (IO ()))))

a1_r1NE
  :: FunPtr (IO ())
     -> State# RealWorld
     -> (# State# RealWorld, () #)

a1_r1NE =
  \ (ds_dEo :: FunPtr (IO ()))
    (eta_B1 :: State# RealWorld) ->
    case ds_dEo of _ { FunPtr ds2_dEq ->
    case {__pkg_ccall_GC main speed_test Addr#
                                -> State# RealWorld
                                -> (# State# RealWorld #)}_dEt
           ds2_dEq eta_B1
    of _ { (# ds3_dEr #) ->
    (# ds3_dEr, () #)
    }
    }

SpeedTest.speed_test
  :: SpeedTest.C'speed_test_cb -> IO ()
[GblId,
 Arity=2,

 Unf=Unf{Src=InlineStable, TopLvl=True, Arity=1, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_XEC [Occ=Once!] :: FunPtr (IO ())) ->
                 case ds_XEC of _ { FunPtr ds2_dEq [Occ=Once] ->
                 (\ (ds3_dEs [Occ=Once] :: State# RealWorld) ->
                    case {__pkg_ccall_GC main speed_test Addr#
                                -> State# RealWorld
                                -> (# State# RealWorld #)}_dEt
                           ds2_dEq ds3_dEs
                    of _ { (# ds4_dEr [Occ=Once] #) ->
                    (# ds4_dEr, () #)
                    })
                 `cast` (Sym (NTCo:IO <()>)
                         :: (State# RealWorld
                             -> (# State# RealWorld, () #))
                              ~#
                            IO ())
                 }}]
SpeedTest.speed_test =
  a1_r1NE
  `cast` (<FunPtr (IO ())>
          -> Sym (NTCo:IO <()>)
          :: (FunPtr (IO ())
              -> State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             (FunPtr (IO ()) -> IO ()))

lvl_r1NF :: [Char]

lvl_r1NF = unpackCString# "..."

SpeedTest.main2 [Occ=LoopBreaker]
  :: Control.Concurrent.Async.Async ()
     -> State# RealWorld
     -> (# State# RealWorld, () #)

SpeedTest.main2 =
  \ (worker_aic :: Control.Concurrent.Async.Async ())
    (eta_B1 :: State# RealWorld) ->
    case ((Control.Concurrent.Async.poll @ () worker_aic)
          `cast` (NTCo:IO
                    <Data.Maybe.Maybe
                       (Data.Either.Either SomeException ())>
                  :: IO
                       (Data.Maybe.Maybe
                          (Data.Either.Either SomeException ()))
                       ~#
                     (State# RealWorld
                      -> (# State# RealWorld,
                            Data.Maybe.Maybe
                              (Data.Either.Either SomeException ()) #))))
           eta_B1
    of _ { (# new_s_aGp, a2_aGq #) ->
    case Handle.Text.hPutStr2
           Handle.FD.stdout lvl_r1NF True new_s_aGp
    of _ { (# new_s1_XH6, _ #) ->
    case a2_aGq of _ {
      Data.Maybe.Nothing -> SpeedTest.main2 worker_aic new_s1_XH6;
      Data.Maybe.Just ds_dEj ->
        case ds_dEj of _ {
          Data.Either.Left e_aie ->
            raiseIO#
              @ SomeException @ () e_aie new_s1_XH6;
          Data.Either.Right r_aif -> (# new_s1_XH6, r_aif #)
        }
    }
    }
    }

SpeedTest.main4
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
SpeedTest.main4 =
  \ (eta_B1 :: State# RealWorld) ->
    (# eta_B1, () #)

SpeedTest.main3
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=IF_ARGS [0] 81 30}]
SpeedTest.main3 =
  \ (eta_Xm :: State# RealWorld) ->
    case ((SpeedTest.mk'speed_test_cb
             (SpeedTest.main4
              `cast` (Sym (NTCo:IO <()>)
                      :: (State# RealWorld
                          -> (# State# RealWorld, () #))
                           ~#
                         IO ())))
          `cast` (NTCo:IO <SpeedTest.C'speed_test_cb>
                  :: IO SpeedTest.C'speed_test_cb
                       ~#
                     (State# RealWorld
                      -> (# State# RealWorld,
                            SpeedTest.C'speed_test_cb #))))
           eta_Xm
    of _ { (# new_s_XGX, a2_XGZ #) ->
    case a2_XGZ of _ { FunPtr ds1_XF2 ->
    case {__pkg_ccall_GC main speed_test Addr#
                                -> State# RealWorld
                                -> (# State# RealWorld #)}_dEt
           ds1_XF2 new_s_XGX
    of _ { (# ds2_XF7 #) ->
    (# ds2_XF7, () #)
    }
    }
    }

SpeedTest.main1
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=IF_ARGS [0] 112 0}]
SpeedTest.main1 =
  \ (eta_Xq :: State# RealWorld) ->
    case ((SpeedTest.mk'speed_test_cb
             (SpeedTest.main4
              `cast` (Sym (NTCo:IO <()>)
                      :: (State# RealWorld
                          -> (# State# RealWorld, () #))
                           ~#
                         IO ())))
          `cast` (NTCo:IO <SpeedTest.C'speed_test_cb>
                  :: IO SpeedTest.C'speed_test_cb
                       ~#
                     (State# RealWorld
                      -> (# State# RealWorld,
                            SpeedTest.C'speed_test_cb #))))
           eta_Xq
    of _ { (# new_s_aGp, a2_aGq #) ->
    case a2_aGq of _ { FunPtr ds1_dEq ->
    case {__pkg_ccall_GC main speed_test Addr#
                                -> State# RealWorld
                                -> (# State# RealWorld #)}_dEt
           ds1_dEq new_s_aGp
    of _ { (# ds2_dEr #) ->
    ((Control.Concurrent.Async.withAsync
        @ ()
        @ ()
        (SpeedTest.main3
         `cast` (Sym (NTCo:IO <()>)
                 :: (State# RealWorld
                     -> (# State# RealWorld, () #))
                      ~#
                    IO ()))
        (SpeedTest.main2
         `cast` (<Control.Concurrent.Async.Async ()>
                 -> Sym (NTCo:IO <()>)
                 :: (Control.Concurrent.Async.Async ()
                     -> State# RealWorld
                     -> (# State# RealWorld, () #))
                      ~#
                    (Control.Concurrent.Async.Async () -> IO ()))))
     `cast` (NTCo:IO <()>
             :: IO ()
                  ~#
                (State# RealWorld
                 -> (# State# RealWorld, () #))))
      ds2_dEr
    }
    }
    }

SpeedTest.main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
SpeedTest.main =
  SpeedTest.main1
  `cast` (Sym (NTCo:IO <()>)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

SpeedTest.main5
  :: State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=1, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=IF_ARGS [0] 30 0}]
SpeedTest.main5 =
  \ (eta_Xt :: State# RealWorld) ->
    runMainIO1
      @ ()
      (SpeedTest.main1
       `cast` (Sym (NTCo:IO <()>)
               :: (State# RealWorld
                   -> (# State# RealWorld, () #))
                    ~#
                  IO ()))
      eta_Xt

:main :: IO ()
[GblId,
 Arity=1,

 Unf=Unf{Src=<vanilla>, TopLvl=True, Arity=0, Value=True,
         ConLike=True, Cheap=True, Expandable=True,
         Guidance=ALWAYS_IF(unsat_ok=True,boring_ok=True)}]
:main =
  SpeedTest.main5
  `cast` (Sym (NTCo:IO <()>)
          :: (State# RealWorld
              -> (# State# RealWorld, () #))
               ~#
             IO ())

==================== Asm code ====================
.data
.align 3
.align 0
.globl ___stginit_SpeedTest
___stginit_SpeedTest:
.globl ___stginit_ZCMain
___stginit_ZCMain:
.data
.align 3
.align 0
_r1ND_closure:
	.quad	_r1ND_info
.const
.align 3
.align 0
_c1Pu_str:
	.byte	0
.text
.align 3
_s1Pc_info_dsp:
	.quad	0
	.quad	32
_s1Pc_info:
Lc1Px:
	addq $16,%r12
	cmpq 144(%r13),%r12
	ja Lc1PB
	movq %rbx,%rax
	movl $1,%edi
	movq %rax,%rsi
	movq _SpeedTest_dEv@GOTPCREL(%rip),%rdx
	leaq _c1Pu_str(%rip),%rcx
	subq $8,%rsp
	movl $0,%eax
	call _createAdjustor
	addq $8,%rsp
	movq %rax,%rcx
	leaq _base_GHCziPtr_FunPtr_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %rcx,0(%r12)
	leaq -7(%r12),%rbx
	addq $8,%rbp
	jmp *0(%rbp)
Lc1PB:
	movq $16,192(%r13)
Lc1Pz:
	movq $255,64(%r13)
	jmp *_stg_gc_ut@GOTPCREL(%rip)
	.long  _s1Pc_info - _s1Pc_info_dsp
.text
.align 3
_r1ND_info_dsp:
	.quad	8589934597
	.quad	0
	.quad	15
_r1ND_info:
Lc1PH:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1PJ
	movq %r14,%rbx
	leaq _s1Pc_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp _stg_makeStablePtrzh
Lc1PJ:
	leaq _r1ND_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  _r1ND_info - _r1ND_info_dsp
.data
.align 3
.align 0
.globl _SpeedTest_mkzqspeedzutestzucb_closure
_SpeedTest_mkzqspeedzutestzucb_closure:
	.quad	_SpeedTest_mkzqspeedzutestzucb_info
.text
.align 3
_SpeedTest_mkzqspeedzutestzucb_info_dsp:
	.quad	8589934597
	.quad	0
	.quad	15
.globl _SpeedTest_mkzqspeedzutestzucb_info
_SpeedTest_mkzqspeedzutestzucb_info:
Lc1PS:
	jmp _r1ND_info
	.long  _SpeedTest_mkzqspeedzutestzucb_info - _SpeedTest_mkzqspeedzutestzucb_info_dsp
.data
.align 3
.align 0
_r1NE_closure:
	.quad	_r1NE_info
.text
.align 3
_s1P8_info_dsp:
	.quad	0
	.quad	32
_s1P8_info:
Lc1Q6:
	leaq _ghczmprim_GHCziTuple_Z0T_closure(%rip),%rax
	leaq 1(%rax),%rbx
	addq $8,%rbp
	jmp *0(%rbp)
	.long  _s1P8_info - _s1P8_info_dsp
.text
.align 3
_s1P9_info_dsp:
	.quad	0
	.quad	32
_s1P9_info:
Lc1Qa:
	movq 7(%rbx),%rax
	movq %rax,64(%rsp)
	leaq _s1P8_info(%rip),%rax
	movq %rax,0(%rbp)
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq %rbp,16(%rax)
	leaq 8(%r12),%rcx
	movq 176(%r13),%rax
	movq %rcx,8(%rax)
	movq %r13,%rdi
	xorl %esi,%esi
	subq $8,%rsp
	movl $0,%eax
	call _suspendThread
	addq $8,%rsp
	movq %rax,72(%rsp)
	movq 64(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _speed_test
	addq $8,%rsp
	movq 72(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _resumeThread
	addq $8,%rsp
	movq %rax,%r13
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq 16(%rax),%rbp
	leaq 192(%rax),%r15
	movq $0,192(%r13)
	movq 176(%r13),%rax
	movq 8(%rax),%rax
	leaq -8(%rax),%r12
	movq 176(%r13),%rax
	movslq 48(%rax),%rax
	shlq $12,%rax
	decq %rax
	movq 176(%r13),%rcx
	movq (%rcx),%rcx
	addq %rax,%rcx
	movq %rcx,144(%r13)
	jmp *0(%rbp)
	.long  _s1P9_info - _s1P9_info_dsp
.text
.align 3
_r1NE_info_dsp:
	.quad	8589934597
	.quad	0
	.quad	15
_r1NE_info:
Lc1QG:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1QI
	movq %r14,%rbx
	leaq _s1P9_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	testq $7,%rbx
	jne _s1P9_info
	jmp *(%rbx)
Lc1QI:
	leaq _r1NE_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  _r1NE_info - _r1NE_info_dsp
.data
.align 3
.align 0
.globl _SpeedTest_speedzutest_closure
_SpeedTest_speedzutest_closure:
	.quad	_SpeedTest_speedzutest_info
.text
.align 3
_SpeedTest_speedzutest_info_dsp:
	.quad	8589934597
	.quad	0
	.quad	15
.globl _SpeedTest_speedzutest_info
_SpeedTest_speedzutest_info:
Lc1QU:
	jmp _r1NE_info
	.long  _SpeedTest_speedzutest_info - _SpeedTest_speedzutest_info_dsp
.data
.align 3
.align 0
_r1NF_closure:
	.quad	_r1NF_info
	.quad	0
	.quad	0
	.quad	0
.const
.align 3
.align 0
_c1R4_str:
	.byte	46
	.byte	46
	.byte	46
	.byte	0
.text
.align 3
_r1NF_info_dsp:
	.quad	0
	.quad	22
_r1NF_info:
Lc1R8:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1Ra
	addq $16,%r12
	cmpq 144(%r13),%r12
	ja Lc1Rc
	movq _stg_CAF_BLACKHOLE_info@GOTPCREL(%rip),%rax
	movq %rax,-8(%r12)
	movq 160(%r13),%rax
	movq %rax,0(%r12)
	movq %r13,%rdi
	movq %rbx,%rsi
	leaq -8(%r12),%rdx
	subq $8,%rsp
	movl $0,%eax
	call _newCAF
	addq $8,%rsp
	testq %rax,%rax
	je Lc1Rd
Lc1Re:
	movq _stg_bh_upd_frame_info@GOTPCREL(%rip),%rax
	movq %rax,-16(%rbp)
	leaq -8(%r12),%rax
	movq %rax,-8(%rbp)
	leaq _c1R4_str(%rip),%r14
	addq $-16,%rbp
	jmp _ghczmprim_GHCziCString_unpackCStringzh_info
Lc1Rc:
	movq $16,192(%r13)
Lc1Ra:
	jmp *-16(%r13)
Lc1Rd:
	jmp *(%rbx)
	.long  _r1NF_info - _r1NF_info_dsp
.const_data
.align 3
.align 0
_SpeedTest_main2_srt:
	.quad	_SpeedTest_main2_closure
	.quad	_asynczm2zi0zi1zi4_ControlziConcurrentziAsync_poll_closure
	.quad	_base_GHCziIOziHandleziText_hPutStr2_closure
	.quad	_base_GHCziIOziHandleziFD_stdout_closure
	.quad	_r1NF_closure
.data
.align 3
.align 0
.globl _SpeedTest_main2_closure
_SpeedTest_main2_closure:
	.quad	_SpeedTest_main2_info
	.quad	0
.text
.align 3
_s1Ph_info_dsp:
	.quad	0
	.quad	32
_s1Ph_info:
Lc1RI:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae Lc1RJ
	movq 7(%rbx),%rbx
	addq $8,%rbp
	jmp _stg_raiseIOzh
Lc1RJ:
	movq 6(%rbx),%rbx
	addq $8,%rbp
	jmp *0(%rbp)
	.long  _s1Ph_info - _s1Ph_info_dsp
.text
.align 3
_s1Pd_info_dsp:
	.quad	_SpeedTest_main2_srt-(_s1Pd_info)+0
	.quad	1
	.quad	4294967328
_s1Pd_info:
Lc1RR:
	movq %rbx,%rax
	andq $7,%rax
	cmpq $2,%rax
	jae Lc1RS
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp _SpeedTest_main2_info
Lc1RS:
	movq 6(%rbx),%rbx
	leaq _s1Ph_info(%rip),%rax
	movq %rax,8(%rbp)
	addq $8,%rbp
	testq $7,%rbx
	jne _s1Ph_info
	jmp *(%rbx)
	.long  _s1Pd_info - _s1Pd_info_dsp
.text
.align 3
_s1Pe_info_dsp:
	.quad	_SpeedTest_main2_srt-(_s1Pe_info)+0
	.quad	2
	.quad	4294967328
_s1Pe_info:
Lc1S2:
	movq 8(%rbp),%rbx
	leaq _s1Pd_info(%rip),%rax
	movq %rax,8(%rbp)
	addq $8,%rbp
	testq $7,%rbx
	jne _s1Pd_info
	jmp *(%rbx)
	.long  _s1Pe_info - _s1Pe_info_dsp
.text
.align 3
_s1Pf_info_dsp:
	.quad	_SpeedTest_main2_srt-(_s1Pf_info)+0
	.quad	1
	.quad	124554051616
_s1Pf_info:
Lc1S9:
	movq %rbx,0(%rbp)
	leaq _base_GHCziIOziHandleziFD_stdout_closure(%rip),%r14
	leaq _r1NF_closure(%rip),%rsi
	leaq _ghczmprim_GHCziTypes_True_closure(%rip),%rax
	leaq 2(%rax),%rdi
	leaq _s1Pe_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp _base_GHCziIOziHandleziText_hPutStr2_info
	.long  _s1Pf_info - _s1Pf_info_dsp
.text
.align 3
_SpeedTest_main2_info_dsp:
	.quad	_SpeedTest_main2_srt-(_SpeedTest_main2_info)+0
	.quad	8589934597
	.quad	0
	.quad	133143986191
.globl _SpeedTest_main2_info
_SpeedTest_main2_info:
Lc1Se:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1Sg
	movq %r14,-8(%rbp)
	leaq _asynczm2zi0zi1zi4_ControlziConcurrentziAsync_poll_closure(%rip),%rbx
	leaq _s1Pf_info(%rip),%rax
	movq %rax,-16(%rbp)
	addq $-16,%rbp
	jmp _stg_ap_pv_fast
Lc1Sg:
	leaq _SpeedTest_main2_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  _SpeedTest_main2_info - _SpeedTest_main2_info_dsp
.data
.align 3
.align 0
.globl _SpeedTest_main4_closure
_SpeedTest_main4_closure:
	.quad	_SpeedTest_main4_info
.text
.align 3
_SpeedTest_main4_info_dsp:
	.quad	4294967299
	.quad	0
	.quad	15
.globl _SpeedTest_main4_info
_SpeedTest_main4_info:
Lc1Sp:
	leaq _ghczmprim_GHCziTuple_Z0T_closure(%rip),%rax
	leaq 1(%rax),%rbx
	jmp *0(%rbp)
	.long  _SpeedTest_main4_info - _SpeedTest_main4_info_dsp
.data
.align 3
.align 0
.globl _SpeedTest_main3_closure
_SpeedTest_main3_closure:
	.quad	_SpeedTest_main3_info
.text
.align 3
_s1P5_info_dsp:
	.quad	0
	.quad	32
_s1P5_info:
Lc1SH:
	leaq _ghczmprim_GHCziTuple_Z0T_closure(%rip),%rax
	leaq 1(%rax),%rbx
	addq $8,%rbp
	jmp *0(%rbp)
	.long  _s1P5_info - _s1P5_info_dsp
.text
.align 3
_s1P6_info_dsp:
	.quad	0
	.quad	32
_s1P6_info:
Lc1SL:
	movq 7(%rbx),%rax
	movq %rax,64(%rsp)
	leaq _s1P5_info(%rip),%rax
	movq %rax,0(%rbp)
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq %rbp,16(%rax)
	leaq 8(%r12),%rcx
	movq 176(%r13),%rax
	movq %rcx,8(%rax)
	movq %r13,%rdi
	xorl %esi,%esi
	subq $8,%rsp
	movl $0,%eax
	call _suspendThread
	addq $8,%rsp
	movq %rax,72(%rsp)
	movq 64(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _speed_test
	addq $8,%rsp
	movq 72(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _resumeThread
	addq $8,%rsp
	movq %rax,%r13
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq 16(%rax),%rbp
	leaq 192(%rax),%r15
	movq $0,192(%r13)
	movq 176(%r13),%rax
	movq 8(%rax),%rax
	leaq -8(%rax),%r12
	movq 176(%r13),%rax
	movslq 48(%rax),%rax
	shlq $12,%rax
	decq %rax
	movq 176(%r13),%rcx
	movq (%rcx),%rcx
	addq %rax,%rcx
	movq %rcx,144(%r13)
	jmp *0(%rbp)
	.long  _s1P6_info - _s1P6_info_dsp
.text
.align 3
_s1P7_info_dsp:
	.quad	0
	.quad	32
_s1P7_info:
Lc1Th:
	leaq _s1P6_info(%rip),%rax
	movq %rax,0(%rbp)
	testq $7,%rbx
	jne _s1P6_info
	jmp *(%rbx)
	.long  _s1P7_info - _s1P7_info_dsp
.text
.align 3
_SpeedTest_main3_info_dsp:
	.quad	4294967299
	.quad	0
	.quad	15
.globl _SpeedTest_main3_info
_SpeedTest_main3_info:
Lc1To:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1Tq
	leaq _SpeedTest_main4_closure(%rip),%rax
	leaq 1(%rax),%r14
	leaq _s1P7_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp _SpeedTest_mkzqspeedzutestzucb_info
Lc1Tq:
	leaq _SpeedTest_main3_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  _SpeedTest_main3_info - _SpeedTest_main3_info_dsp
.const_data
.align 3
.align 0
_SpeedTest_main1_srt:
	.quad	_SpeedTest_main2_closure
	.quad	_asynczm2zi0zi1zi4_ControlziConcurrentziAsync_withAsync_closure
.data
.align 3
.align 0
.globl _SpeedTest_main1_closure
_SpeedTest_main1_closure:
	.quad	_SpeedTest_main1_info
	.quad	0
.text
.align 3
_s1P2_info_dsp:
	.quad	_SpeedTest_main1_srt-(_s1P2_info)+0
	.quad	0
	.quad	12884901920
_s1P2_info:
Lc1TL:
	leaq _asynczm2zi0zi1zi4_ControlziConcurrentziAsync_withAsync_closure(%rip),%rbx
	leaq _SpeedTest_main3_closure(%rip),%rax
	leaq 1(%rax),%r14
	leaq _SpeedTest_main2_closure(%rip),%rax
	leaq 2(%rax),%rsi
	addq $8,%rbp
	jmp _stg_ap_ppv_fast
	.long  _s1P2_info - _s1P2_info_dsp
.text
.align 3
_s1P3_info_dsp:
	.quad	_SpeedTest_main1_srt-(_s1P3_info)+0
	.quad	0
	.quad	12884901920
_s1P3_info:
Lc1TQ:
	movq 7(%rbx),%rax
	movq %rax,64(%rsp)
	leaq _s1P2_info(%rip),%rax
	movq %rax,0(%rbp)
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq %rbp,16(%rax)
	leaq 8(%r12),%rcx
	movq 176(%r13),%rax
	movq %rcx,8(%rax)
	movq %r13,%rdi
	xorl %esi,%esi
	subq $8,%rsp
	movl $0,%eax
	call _suspendThread
	addq $8,%rsp
	movq %rax,72(%rsp)
	movq 64(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _speed_test
	addq $8,%rsp
	movq 72(%rsp),%rax
	movq %rax,%rdi
	subq $8,%rsp
	movl $0,%eax
	call _resumeThread
	addq $8,%rsp
	movq %rax,%r13
	movq 160(%r13),%rax
	movq 24(%rax),%rax
	movq 16(%rax),%rbp
	leaq 192(%rax),%r15
	movq $0,192(%r13)
	movq 176(%r13),%rax
	movq 8(%rax),%rax
	leaq -8(%rax),%r12
	movq 176(%r13),%rax
	movslq 48(%rax),%rax
	shlq $12,%rax
	decq %rax
	movq 176(%r13),%rcx
	movq (%rcx),%rcx
	addq %rax,%rcx
	movq %rcx,144(%r13)
	jmp *0(%rbp)
	.long  _s1P3_info - _s1P3_info_dsp
.text
.align 3
_s1P4_info_dsp:
	.quad	_SpeedTest_main1_srt-(_s1P4_info)+0
	.quad	0
	.quad	12884901920
_s1P4_info:
Lc1Um:
	leaq _s1P3_info(%rip),%rax
	movq %rax,0(%rbp)
	testq $7,%rbx
	jne _s1P3_info
	jmp *(%rbx)
	.long  _s1P4_info - _s1P4_info_dsp
.text
.align 3
_SpeedTest_main1_info_dsp:
	.quad	_SpeedTest_main1_srt-(_SpeedTest_main1_info)+0
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl _SpeedTest_main1_info
_SpeedTest_main1_info:
Lc1Ut:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb Lc1Uv
	leaq _SpeedTest_main4_closure(%rip),%rax
	leaq 1(%rax),%r14
	leaq _s1P4_info(%rip),%rax
	movq %rax,-8(%rbp)
	addq $-8,%rbp
	jmp _SpeedTest_mkzqspeedzutestzucb_info
Lc1Uv:
	leaq _SpeedTest_main1_closure(%rip),%rbx
	jmp *-8(%r13)
	.long  _SpeedTest_main1_info - _SpeedTest_main1_info_dsp
.const_data
.align 3
.align 0
_SpeedTest_main_srt:
	.quad	_SpeedTest_main1_closure
.data
.align 3
.align 0
.globl _SpeedTest_main_closure
_SpeedTest_main_closure:
	.quad	_SpeedTest_main_info
	.quad	0
.text
.align 3
_SpeedTest_main_info_dsp:
	.quad	_SpeedTest_main_srt-(_SpeedTest_main_info)+0
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl _SpeedTest_main_info
_SpeedTest_main_info:
Lc1UG:
	jmp _SpeedTest_main1_info
	.long  _SpeedTest_main_info - _SpeedTest_main_info_dsp
.const_data
.align 3
.align 0
_SpeedTest_main5_srt:
	.quad	_base_GHCziTopHandler_runMainIO1_closure
	.quad	_SpeedTest_main1_closure
.data
.align 3
.align 0
.globl _SpeedTest_main5_closure
_SpeedTest_main5_closure:
	.quad	_SpeedTest_main5_info
	.quad	0
.text
.align 3
_SpeedTest_main5_info_dsp:
	.quad	_SpeedTest_main5_srt-(_SpeedTest_main5_info)+0
	.quad	4294967299
	.quad	0
	.quad	12884901903
.globl _SpeedTest_main5_info
_SpeedTest_main5_info:
Lc1UO:
	leaq _SpeedTest_main1_closure(%rip),%rax
	leaq 1(%rax),%r14
	jmp _base_GHCziTopHandler_runMainIO1_info
	.long  _SpeedTest_main5_info - _SpeedTest_main5_info_dsp
.const_data
.align 3
.align 0
_ZCMain_main_srt:
	.quad	_SpeedTest_main5_closure
.data
.align 3
.align 0
.globl _ZCMain_main_closure
_ZCMain_main_closure:
	.quad	_ZCMain_main_info
	.quad	0
.text
.align 3
_ZCMain_main_info_dsp:
	.quad	_ZCMain_main_srt-(_ZCMain_main_info)+0
	.quad	4294967299
	.quad	0
	.quad	4294967311
.globl _ZCMain_main_info
_ZCMain_main_info:
Lc1UX:
	jmp _SpeedTest_main5_info
	.long  _ZCMain_main_info - _ZCMain_main_info_dsp

Linking SpeedTest ...

