Handler/UserTutorial.hs:235:25:
    Exception when trying to run compile-time code:
      Unable to compile Fay module "Ide": GHCError "\nfay/Ide/Buffers/RunConfig.hs:97:46:\n    Could not deduce (v ~ v2)\n    from the context (Gettable (v [(FayRunConfigId, RunConfig)]),\n                      Settable (v [(FayRunConfigId, RunConfig)]))\n      bound by the inferred type of\n               makeConfig :: (Gettable (v [(FayRunConfigId, RunConfig)]),\n                              Settable (v [(FayRunConfigId, RunConfig)])) =>\n                             State\n                             -> v [(FayRunConfigId, RunConfig)]\n                             -> Tree a\n                             -> Text\n                             -> (FayRunConfigId, RunConfig)\n                             -> t\n                             -> JQuery\n                             -> Fay ()\n      at fay/Ide/Buffers/RunConfig.hs:(71,1)-(97,94)\n    or from (v [(FayRunConfigId, RunConfig)]\n             ~ v2 [(FayRunConfigId, t1)],\n             Gettable (v1 t1),\n             Gettable (v2 [(FayRunConfigId, t1)]),\n             Settable (v2 [(FayRunConfigId, t1)]))\n      bound by the inferred type of\n               saveMe :: (v [(FayRunConfigId, RunConfig)]\n                          ~ v2 [(FayRunConfigId, t1)],\n                          Gettable (v1 t1), Gettable (v2 [(FayRunConfigId, t1)]),\n                          Settable (v2 [(FayRunConfigId, t1)])) =>\n                         v1 t1 -> Fay ()\n      at fay/Ide/Buffers/RunConfig.hs:(96,17)-(97,94)\n      `v' is a rigid type variable bound by\n          the inferred type of\n          makeConfig :: (Gettable (v [(FayRunConfigId, RunConfig)]),\n                         Settable (v [(FayRunConfigId, RunConfig)])) =>\n                        State\n                        -> v [(FayRunConfigId, RunConfig)]\n                        -> Tree a\n                        -> Text\n                        -> (FayRunConfigId, RunConfig)\n                        -> t\n                        -> JQuery\n                        -> Fay ()\n          at fay/Ide/Buffers/RunConfig.hs:71:1\n      `v2' is a rigid type variable bound by\n           the inferred type of\n           saveMe :: (v [(FayRunConfigId, RunConfig)]\n                      ~ v2 [(FayRunConfigId, t1)],\n                      Gettable (v1 t1), Gettable (v2 [(FayRunConfigId, t1)]),\n                      Settable (v2 [(FayRunConfigId, t1)])) =>\n                     v1 t1 -> Fay ()\n           at fay/Ide/Buffers/RunConfig.hs:96:17\n    Expected type: v2 [(FayRunConfigId, t1)]\n      Actual type: v [(FayRunConfigId, RunConfig)]\n    In the first argument of `modify', namely `configsVar'\n    In a stmt of a 'do' block:\n      modify configsVar (((i, config') :) . filter ((/= i) . fst))\n    In the expression:\n      do { config' <- get configVar;\n           modify configsVar (((i, config') :) . filter ((/= i) . fst)) }\n\nfay/Ide/Buffers/RunConfig.hs:97:46:\n    Could not deduce (t1 ~ RunConfig)\n    from the context (Gettable (v [(FayRunConfigId, RunConfig)]),\n                      Settable (v [(FayRunConfigId, RunConfig)]))\n      bound by the inferred type of\n               makeConfig :: (Gettable (v [(FayRunConfigId, RunConfig)]),\n                              Settable (v [(FayRunConfigId, RunConfig)])) =>\n                             State\n                             -> v [(FayRunConfigId, RunConfig)]\n                             -> Tree a\n                             -> Text\n                             -> (FayRunConfigId, RunConfig)\n                             -> t\n                             -> JQuery\n                             -> Fay ()\n      at fay/Ide/Buffers/RunConfig.hs:(71,1)-(97,94)\n    or from (v [(FayRunConfigId, RunConfig)]\n             ~ v2 [(FayRunConfigId, t1)],\n             Gettable (v1 t1),\n             Gettable (v2 [(FayRunConfigId, t1)]),\n             Settable (v2 [(FayRunConfigId, t1)]))\n      bound by the inferred type of\n               saveMe :: (v [(FayRunConfigId, RunConfig)]\n                          ~ v2 [(FayRunConfigId, t1)],\n                          Gettable (v1 t1), Gettable (v2 [(FayRunConfigId, t1)]),\n                          Settable (v2 [(FayRunConfigId, t1)])) =>\n                         v1 t1 -> Fay ()\n      at fay/Ide/Buffers/RunConfig.hs:(96,17)-(97,94)\n      `t1' is a rigid type variable bound by\n           the inferred type of\n           saveMe :: (v [(FayRunConfigId, RunConfig)]\n                      ~ v2 [(FayRunConfigId, t1)],\n                      Gettable (v1 t1), Gettable (v2 [(FayRunConfigId, t1)]),\n                      Settable (v2 [(FayRunConfigId, t1)])) =>\n                     v1 t1 -> Fay ()\n           at fay/Ide/Buffers/RunConfig.hs:96:17\n    Expected type: v2 [(FayRunConfigId, t1)]\n      Actual type: v [(FayRunConfigId, RunConfig)]\n    In the first argument of `modify', namely `configsVar'\n    In a stmt of a 'do' block:\n      modify configsVar (((i, config') :) . filter ((/= i) . fst))\n    In the expression:\n      do { config' <- get configVar;\n           modify configsVar (((i, config') :) . filter ((/= i) . fst)) }\n"
      Code: fayFile "Ide"
    In a stmt of a 'do' block: $(fayFile "Ide")
    In the second argument of `($)', namely
      `do { setTitle $ toHtml title;
            toWidgetHead
              (\ _render_a5pRf
                 -> GHC.Base.id
                      ((Text.Blaze.Internal.preEscapedText GHC.Base.. Data.Text.pack)
                         "<meta http-equiv=\"X-UA-Compatible\" content=\"chrome=IE8\"> </meta>"));
            defaultWidgetJs;
            $(widgetFile "console");
            .... }'
    In a stmt of a 'do' block:
      pc <- widgetToPageContent
            $ do { setTitle $ toHtml title;
                   toWidgetHead
                     (\ _render_a5pRf
                        -> GHC.Base.id
                             ((Text.Blaze.Internal.preEscapedText GHC.Base.. Data.Text.pack)
                                "<meta http-equiv=\"X-UA-Compatible\" content=\"chrome=IE8\"> </meta>"));
                   defaultWidgetJs;
                   $(widgetFile "console");
                   .... }
